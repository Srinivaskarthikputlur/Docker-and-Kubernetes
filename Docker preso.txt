********Docker layers benefits *****************
Docker reuses layers for new builds. 
This makes the builds much faster. 
This is great for contentious integration, where we want to build an image at the end of each successful build (e.g. in Jenkins). 
But the build is not only faster, the images are also smaller, since intermediate images are shared between images.
But maybe the best things are rollbacks: since every image contains all of its building steps, we can easily go back to a previous step if we want so. This can be done tagging a certain layer.

https://tuhrig.de/layering-of-docker-images/

https://opensource.com/resources/what-docker
https://docs.docker.com/engine/docker-overview/
https://github.com/how2dock/docbook/tree/master/ch01/supervisor
https://docs.docker.com/engine/docker-overview/


some links:
https://labs.play-with-docker.com


//remove a container

#docker rm <container-id>

//remove a image

#docker rmi <image-id>

You cannot remove a image with out removing the containers. First remove all the containers and then remove the image

//list running container
docker ls 
or 
docker ps // both are same

//list all containers
docker ls -a
docker ps -a

// list all images
#docker image ls

//to start container
docker container start <container-id>

//to stop docker container
docker container stop <container-id>

You cannot remove a running container. You first need to stop it

// Publish using -p host:container
docker container run -d --publish 80:80 --name webhost nginx

$ docker exec -ti 9d7cebd75dcf /bin/bash

docker container run --publish 80:80 ngnix

Images are run. Containers are started and stopped. You can start any number of containers from a single image
run command works only with images

*************Docker File and various directives***********
FROM busybox  // From which base image you want to build the image
ENV foo=bar	//Environment variables
ENTRYPOINT ["/bin/echo"]  // Which command to run when this container is started
CMD ["/bin/echo" , "Hi Docker !"]  //This also executes command when the container is started but you can replace the command by giving arguments when running the container.
RUN apt-get update  // Runs the program thats specified here.
EXPOSE 5000 // exposes the port specified here
ADD hello.py /tmp/hello.py   //Adds the file specified here
COPY hello.py /tmp/hello.py   //Copies the specified file
WORKDIR /usr/src/app  //Changes your current directory to the one specified here
ONBUILD //This directive defines a trigger that gets executed at a later time. The trigger is a regular Dockerfile directive like RUN or ADD. An image containing ONBUILD directives is called a parent image. When a parent image is used as a base image (i.e., using the FROM directive), the image being built—also called the child—triggers the directives defined by ONBUILD in the parent. In other words, the parent image tells the child image what to do at build time. You can still add directives in the Dockerfile of the child, but the ONBUILD directives of the parent will be executed first.


*********************************************************

$ docker build -t busybox2 .
#docker run busybox2 env | grep foo

*****************Supervisor**************


Copy the supervisord.conf and wp-config.php files to the location from where you run teh docker commands

$ docker build -t pythonapp .
$ docker run -d -p 80:80 pythonapp


******************************************
link two containers

$ docker pull wordpress:latest
$ docker pull mysql:latest

λ docker image push kartb4u/nginx

//First run teh mysql container
$ docker run --name mysqlwp -e MYSQL_ROOT_PASSWORD=wordpressdocker -d mysql

or

docker run --name mysqlwp -e MYSQL_ROOT_PASSWORD=wordpressdocker \
-e MYSQL_DATABASE=wordpress \
-e MYSQL_USER=wordpress \
-e MYSQL_PASSWORD=wordpresspwd \
-d mysql

or with env file

docker run --name mysqlwp --env-file ./envfile -d mysql

Then run wordpress and link the mysql container
$ docker run --name wordpress --link mysqlwp -p 80:80 -d wordpress

or 

docker run --name wordpress --env-file ./wpenvfile --link mysqlwp -p 80:80 -d wordpress

or

docker run --name wordpress --link mysqlwp:mysql -p 80:80 \
-e WORDPRESS_DB_NAME=wordpress \
-e WORDPRESS_DB_USER=wordpress \
-e WORDPRESS_DB_PASSWORD=wordpresspwd \
-d wordpress



******************************************
commit changes and layers

$ docker run -t -i ubuntu:14.04 /bin/bash
root@69079aaaaab1:/# apt-get update
$ docker commit 69079aaaaab1 ubuntu:update
$ docker diff 69079aaaaab1

**********To delete all images and containers
docker system prune -a --volumes

